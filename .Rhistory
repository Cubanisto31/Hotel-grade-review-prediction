View(df)
ggplot(df, aes( x = character_number, y = Rating))
ggplot(df, aes( x = character_number, y = Rating))+
geom_point(stat = "identity")
ggplot(df, aes( x = character_number, y = Rating))+
geom_point(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")
ggplot(df, aes( x = character_number, y = Rating))+
geom_point(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_density(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_abline(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_area(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_bar(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_count(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_quantile(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_boxplot(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_pointrange(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_violin(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_point(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes(x = Review)+
theme_minimal()
theme_minimal()
ggplot(grade_rep, aes(x = Var1, y = Freq ))+
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Distribution des notes", x = "Note", y = "Fréquence") +
theme_minimal()
#Tracer la répartition des notes attribuées
grade_rep <- table(df$Rating) %>% as.data.frame()
#Tracer la répartition des notes attribuées
grade_rep <- table(df$Rating)
#Tracer la répartition des notes attribuées
grade_rep <- table(df$Rating) %>% as.data.frame()
ggplot(df, aes( x = character_number, y = Rating))+
geom_point(stat = "identity")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
help("geom_point")
ggplot(df, aes( x = character_number, y = Rating))+
geom_point(stat = "identity", fill = "skyblue")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_point(stat = "identity", color = "skyblue")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_point(stat = "identity", color = "red")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = character_number, y = Rating))+
geom_point(stat = "identity", color = "black")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
ggplot(df, aes( x = class_Ch_N, y = Rating))+
geom_point(stat = "identity", color = "black")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
table(df$Rating, df$character_number)
table(df$Rating, df$class_Ch_N)
a <- table(df$Rating, df$class_Ch_N)
a <- table(df$Rating, df$class_Ch_N) %>% as.data.frame()
View(a)
ggplot(a, aes(x = Var1, y = Freq ))+
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Distribution des notes", x = "Note", y = "Fréquence") +
theme_minimal()
View(a)
View(a)
ggplot(a, aes(x = Var1, y = Freq, fill = Var2 ))+
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Distribution des notes", x = "Note", y = "Fréquence") +
theme_minimal()
View(a)
grade_by_size <- table(df$Rating, df$class_Ch_N) %>% as.data.frame()
ggplot(grade_by_size, aes(x = Var1, y = Freq, fill = Var2 ))+
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Distribution des notes", x = "Note", y = "Fréquence") +
theme_minimal()
rm(a)
grade_by_size <- grade_by_size %>%
group_by(Var2) %>%
mutate(prop = Freq / sum(Freq)) %>%
ungroup()
View(grade_by_size)
grade_by_size <- grade_by_size %>%
group_by(Var2) %>%
mutate(prop = Freq / sum(Freq)) %>%
round()
View(grade_by_size)
View(grade_by_size)
grade_by_size <- grade_by_size %>%
mutate(percent = round(prop * 100, 2))
#
grade_by_size <- table(df$Rating, df$class_Ch_N) %>% as.data.frame()
ggplot(grade_by_size, aes(x = Var1, y = Freq, fill = Var2 ))+
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Distribution des notes", x = "Note", y = "Fréquence") +
theme_minimal()
grade_by_size <- grade_by_size %>%
group_by(Var2) %>%
mutate(prop = Freq / sum(Freq)) %>%
ungroup()
#Ajouter des colonnes qui permettent de voir la répartition des notes dans chaque
grade_by_size <- grade_by_size %>%
group_by(Var2) %>%
mutate(prop_rate_by_size = Freq / sum(Freq)) %>%
ungroup()
grade_by_size <- grade_by_size %>%
mutate(percent = round(prop_rate_by_size * 100, 2))
#Tracer la fréquence des commentaires en fonction de leur note
grade_by_size <- table(df$Rating, df$class_Ch_N) %>% as.data.frame()
#Ajouter des colonnes qui permettent de voir la répartition des notes dans chaque class de commentaires (Class_ch_number)
grade_by_size <- grade_by_size %>%
group_by(Var2) %>%
mutate(prop_rate_by_size = Freq / sum(Freq)) %>%
ungroup()
grade_by_size <- grade_by_size %>%
mutate(percent = round(prop_rate_by_size * 100, 2))
#Tracer la fréquence des commentaires en fonction de leur note
grade_by_size <- table(df$Rating, df$class_Ch_N) %>% as.data.frame()
#Ajouter des colonnes qui permettent de voir la répartition des notes dans chaque class de commentaires (Class_ch_number)
grade_by_size <- grade_by_size %>%
group_by(Var2) %>%
mutate(prop_rate_by_size = Freq / sum(Freq)) %>%
ungroup()
grade_by_size <- grade_by_size %>%
mutate(percent_rate_by_size = round(prop_rate_by_size * 100, 2))
#Ajouter des colonnes qui permettent de voir la répartition des class de commentaires  dans chaque note
grade_by_size <- grade_by_size %>%
group_by(Var1) %>%
mutate(prop_size_by_rate = Freq / sum(Freq)) %>%
ungroup()
grade_by_size <- grade_by_size %>%
mutate(percent_size_by_rate = round(prop_size_by_rate * 100, 2))
View(grade_by_size)
# Création des diagrammes en camembert
ggplot(grade_by_size, aes(x = "", y = percent_rate_by_size, fill = Subgroup)) +
geom_bar(stat = "identity", width = 1, color = "white") +  # Barres empilées
coord_polar(theta = "y") +                                # Transformation en camembert
facet_wrap(~Var2) +                                       # Un camembert par modalité de Var2
labs(title = "Répartition des pourcentages par Var2",
fill = "Sous-groupe",
x = NULL,
y = NULL) +
theme_void() +                                            # Thème minimaliste pour camembert
theme(legend.position = "bottom")
# Création des diagrammes en camembert
ggplot(grade_by_size, aes(x = "", y = percent_rate_by_size, fill = Var2)) +
geom_bar(stat = "identity", width = 1, color = "white") +  # Barres empilées
coord_polar(theta = "y") +                                # Transformation en camembert
facet_wrap(~Var2) +                                       # Un camembert par modalité de Var2
labs(title = "Répartition des pourcentages par Var2",
fill = "Sous-groupe",
x = NULL,
y = NULL) +
theme_void() +                                            # Thème minimaliste pour camembert
theme(legend.position = "bottom")
# Création des diagrammes en camembert
ggplot(grade_by_size, aes(x = "", y = percent_rate_by_size, fill = Var1)) +
geom_bar(stat = "identity", width = 1, color = "white") +  # Barres empilées
coord_polar(theta = "y") +                                # Transformation en camembert
facet_wrap(~Var2) +                                       # Un camembert par modalité de Var2
labs(title = "Répartition des pourcentages par Var2",
fill = "Sous-groupe",
x = NULL,
y = NULL) +
theme_void() +                                            # Thème minimaliste pour camembert
theme(legend.position = "bottom")
# Ajouter une colonne pour calculer les positions des étiquettes
grade_by_size <- grade_by_size %>%
group_by(Var2) %>%
mutate(cumulative = cumsum(percent_rate_by_size),
midpoint = cumulative - percent_rate_by_size / 2) %>%
ungroup()
View(grade_by_size)
# Création des diagrammes en camembert
ggplot(grade_by_size, aes(x = "", y = percent_rate_by_size, fill = Var1)) +
geom_bar(stat = "identity", width = 1, color = "white") +  # Barres empilées
coord_polar(theta = "y") +                                # Transformation en camembert
geom_text(aes(y = midpoint, label = paste0(percent_rate_by_size, "%")), color = "black", size = 4) +
facet_wrap(~Var2) +                                       # Un camembert par modalité de Var2
labs(title = "Répartition des pourcentages par Var2",
fill = "Sous-groupe",
x = NULL,
y = NULL) +
theme_void() +                                            # Thème minimaliste pour camembert
theme(legend.position = "bottom")
# Création des diagrammes en camembert
ggplot(grade_by_size, aes(x = "", y = percent_rate_by_size, fill = Var1)) +
geom_bar(stat = "identity", width = 1, color = "white") +  # Barres empilées
coord_polar(theta = "y") +                                # Transformation en camembert
facet_wrap(~Var2) +                                       # Un camembert par modalité de Var2
labs(title = "Répartition des pourcentages par Var2",
fill = "Sous-groupe",
x = NULL,
y = NULL) +
theme_void() +                                            # Thème minimaliste pour camembert
theme(legend.position = "bottom")
# Création des diagrammes en camembert pour observer la part des class de commentaires dans les notes
ggplot(grade_by_size, aes(x = "", y = percent_rate_by_size, fill = Var2)) +
geom_bar(stat = "identity", width = 1, color = "white") +  # Barres empilées
coord_polar(theta = "y") +                                # Transformation en camembert
facet_wrap(~Var1) +                                       # Un camembert par modalité de Var2
labs(title = "Répartition des pourcentages par Var2",
fill = "Sous-groupe",
x = NULL,
y = NULL) +
theme_void() +                                            # Thème minimaliste pour camembert
theme(legend.position = "bottom")
# Création des diagrammes en camembert pour observer la part des class de commentaires dans les notes
ggplot(grade_by_size, aes(x = "", y = percent_size_by_rate, fill = Var2)) +
geom_bar(stat = "identity", width = 1, color = "white") +  # Barres empilées
coord_polar(theta = "y") +                                # Transformation en camembert
facet_wrap(~Var1) +                                       # Un camembert par modalité de Var2
labs(title = "Répartition des pourcentages par Var2",
fill = "Sous-groupe",
x = NULL,
y = NULL) +
theme_void() +                                            # Thème minimaliste pour camembert
theme(legend.position = "bottom")
# Création des diagrammes en camembert pour observer la part des class de commentaires dans les notes
ggplot(grade_by_size, aes(x = "", y = percent_size_by_rate, fill = Var2)) +
geom_bar(stat = "identity", width = 1, color = "white") +  # Barres empilées
coord_polar(theta = "y") +                                # Transformation en camembert
facet_wrap(~Var1) +                                       # Un camembert par modalité de Var2
labs(title = "Proportion des tailles de commentaire par notes",
fill = "Taille de commentaires",
x = NULL,
y = NULL) +
theme_void() +                                            # Thème minimaliste pour camembert
theme(legend.position = "bottom")
library(dplyr)
library(ggplot2)
library(formattable)
library(readr)
## Ce script permet de manipuler la df pour préparer l'estimation économétrique des notes
#Importer la base de données
tripadvisor_hotel_reviews <- read_csv("tripadvisor_hotel_reviews.csv")
df <- tripadvisor_hotel_reviews
df <- df %>%
mutate(character_number = nchar(df$Review)) %>%
mutate(words_number = sapply(strsplit(df$Review, "\\s+"), length))
#Voir si je décide de ne pas arrondir pour regarder si ça peut donner des messages
# Ajouter variable longueur moyenne des mots
df <- df %>%
mutate(W_length_mean = round(character_number / words_number))
table(df$W_length_mean)
df <- df %>%
mutate(
class_Ch_N = case_when(
character_number <= 337 ~ "Très petit",
character_number <= 535 ~ "Petit",
character_number <= 857 ~ "Grand",
TRUE ~ "Très grand"))
df <- df %>%
mutate(
class_W_N = case_when(
words_number <= 48 ~ "Très petit",
words_number <= 77 ~ "Petit",
words_number <= 124 ~ "Grand",
TRUE ~ "Très grand"))
#Tableau de contingence entre le nombre de lettres et le nombre de mots
a <- table(df$class_Ch_N, df$class_W_N)
#Voir si je ne peux pas un peu optimiser ce bout infra
a <- as.data.frame(a)
# Réordonner les modalités de Var1 dans un ordre spécifique
a$Var1 <- factor(a$Var1, levels = c("Très petit", "Petit", "Grand", "Très grand"))
# Trier les lignes du dataframe selon l'ordre de Var1
a <- a %>%
arrange(Var1)
a$Var2 <- factor(a$Var2, levels = c("Très petit", "Petit", "Grand", "Très grand"))
# Trier les lignes du dataframe selon l'ordre de Var2
a <- a %>%
arrange(Var2)
# Tracer le tableau de contingence
ggplot(a, aes(x = Var1, y= Var2, fill= Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(x = "Character_number", y = "Word_number", title = "Tableau de contingence nombre de lettres vs nombre de mots") +
theme_minimal()
#Tracer la répartition des notes attribuées
grade_rep <- table(df$Rating) %>% as.data.frame()
ggplot(grade_rep, aes(x = Var1, y = Freq ))+
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Distribution des notes", x = "Note", y = "Fréquence") +
theme_minimal()
#Tracer la répartition des notes en fonction du nombre de charactères
ggplot(df, aes( x = character_number, y = Rating))+
geom_point(stat = "identity", color = "black")+
labs(title = "Répartition des notes en fonction du nombre de charactères", x= "Nombre de charactères", y="Notes")+
theme_minimal()
#Tracer la fréquence des commentaires en fonction de leur note
grade_by_size <- table(df$Rating, df$class_Ch_N) %>% as.data.frame()
ggplot(grade_by_size, aes(x = Var1, y = Freq, fill = Var2 ))+
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Distribution des notes", x = "Note", y = "Fréquence") +
theme_minimal()
#Il semble que les class_ch sont réparties de manière similaire au sein des notes
#Ajouter des colonnes qui permettent de voir la répartition des notes dans chaque class de commentaires (Class_ch_number)
grade_by_size <- grade_by_size %>%
group_by(Var2) %>%
mutate(prop_rate_by_size = Freq / sum(Freq)) %>%
ungroup()
grade_by_size <- grade_by_size %>%
mutate(percent_rate_by_size = round(prop_rate_by_size * 100, 2))
#Ajouter des colonnes qui permettent de voir la répartition des class de commentaires  dans chaque note
grade_by_size <- grade_by_size %>%
group_by(Var1) %>%
mutate(prop_size_by_rate = Freq / sum(Freq)) %>%
ungroup()
grade_by_size <- grade_by_size %>%
mutate(percent_size_by_rate = round(prop_size_by_rate * 100, 2))
# Création des diagrammes en camembert pour observer la part des notes dans les class de commentaires
ggplot(grade_by_size, aes(x = "", y = percent_rate_by_size, fill = Var1)) +
geom_bar(stat = "identity", width = 1, color = "white") +  # Barres empilées
coord_polar(theta = "y") +                                # Transformation en camembert
facet_wrap(~Var2) +                                       # Un camembert par modalité de Var2
labs(title = "Proportion des notes par taille de commentaire",
fill = "Notes",
x = NULL,
y = NULL) +
theme_void() +                                            # Thème minimaliste pour camembert
theme(legend.position = "bottom")
# Création des diagrammes en camembert pour observer la part des class de commentaires dans les notes
ggplot(grade_by_size, aes(x = "", y = percent_size_by_rate, fill = Var2)) +
geom_bar(stat = "identity", width = 1, color = "white") +  # Barres empilées
coord_polar(theta = "y") +                                # Transformation en camembert
facet_wrap(~Var1) +                                       # Un camembert par modalité de Var2
labs(title = "Proportion des tailles de commentaire par notes",
fill = "Taille de commentaires",
x = NULL,
y = NULL) +
theme_void() +                                            # Thème minimaliste pour camembert
theme(legend.position = "bottom")
View(a)
# Tracer le tableau de contingence
ggplot(a, aes(x = Var1, y= Var2, fill= Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(x = "Character_number", y = "Word_number", title = "Tableau de contingence nombre de lettres vs nombre de mots") +
theme_minimal()
rm(a)
tab_conting <- table(df$class_Ch_N, df$class_W_N)
#Voir si je ne peux pas un peu optimiser ce bout infra
tab_conting <- as.data.frame(a)
#Voir si je ne peux pas un peu optimiser ce bout infra
tab_conting <- as.data.frame(tab_conting)
# Réordonner les modalités de Var1 dans un ordre spécifique
tab_conting$Var1 <- factor(tab_conting$Var1, levels = c("Très petit", "Petit", "Grand", "Très grand"))
# Trier les lignes du dataframe selon l'ordre de Var1
tab_conting <- tab_conting %>%
arrange(Var1)
tab_conting$Var2 <- factor(tab_conting$Var2, levels = c("Très petit", "Petit", "Grand", "Très grand"))
# Trier les lignes du dataframe selon l'ordre de Var2
tab_conting <- tab_conting %>%
arrange(Var2)
# Tracer le tableau de contingence
ggplot(tab_conting, aes(x = Var1, y= Var2, fill= Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(x = "Character_number", y = "Word_number", title = "Tableau de contingence nombre de lettres vs nombre de mots") +
theme_minimal()
library(dplyr)
library(ggplot2)
library(formattable)
library(readr)
library(tidyr)
'''R
#Importer la base de données
tripadvisor_hotel_reviews <- read_csv("tripadvisor_hotel_reviews.csv")
# Test du Chi²
chi2_result <- chisq.test(contingence_table)
library(tidyr)
stop
break()
df <- tripadvisor_hotel_reviews
library(knitr)
library(rmarkdown)
library(markdown)
ggplot(grade_by_size, aes(x = Var1, y = Freq, fill = Var2 ))+
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Distribution des notes", x = "Note", y = "Fréquence") +
theme_minimal()
```{r chunk_name, echo=TRUE}
```{r my_graph, echo=FALSE}
library(ggplot2)
ggplot(grade_by_size, aes(x = Var1, y = Freq, fill = Var2 ))+
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Distribution des notes", x = "Note", y = "Fréquence") +
theme_minimal()
```
ggplot(grade_by_size, aes(x = Var1, y = Freq, fill = Var2 ))+
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Distribution des notes", x = "Note", y = "Fréquence") +
theme_minimal()
```{r my_graph, echo=FALSE}
books_tidy <- proust_books() %>%
mutate(text = stringr::str_replace_all(.$text, "’", " ")) %>%
unnest_tokens(word, text) %>%
filter(!word %in% stopwords_iso$fr) %>%
count(word, sort = TRUE) %>%
head(10)
library("tm")
library("tidytext")
library("proustr")
library("tidyverse")
library("devtools")
devtools::install_github("ThinkRstat/stopwords")
library("stopwords")
library("dplyr")
books <- proust_books()
books_tidy <- proust_books() %>%
mutate(text = stringr::str_replace_all(.$text, "’", " ")) %>%
unnest_tokens(word, text) %>%
filter(!word %in% stopwords_iso$fr) %>%
count(word, sort = TRUE) %>%
head(10)
View(books_tidy)
View(books_tidy)
View(books)
books_tidy_test <- proust_books() %>%
unnest_tokens(word, text) %>%
filter(!word %in% stopwords_iso$fr) %>%
count(word, sort = TRUE) %>%
head(10)
View(books_tidy_test)
View(books_tidy)
barplot(height=books_tidy$n, names.arg= books_tidy$word, xlab="Mots", ylab="Fréquence", col="#973232", main="À la recherche du temps perdu")
library("ggplot2")
View(books_tidy)
geom_bar(stat = "identify")
geom_bar(stat = "count")
ggplot(books_tidy, aes(x=word, y=n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black")
ggplot(books_tidy, aes(x=word, y=n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black")+
labs(title = "La recherche du temps perdu", x="Mots", y="Fréquence")
ggplot(books_tidy, aes(x=word, y=n)) +
geom_bar(stat = "count", fill = "skyblue", color = "black")+
labs(title = "La recherche du temps perdu", x="Mots", y="Fréquence")
ggplot(books_tidy, aes(x=word, y=n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black")+
labs(title = "La recherche du temps perdu", x="Mots", y="Fréquence")
View(books_tidy)
ggplot(books_tidy, aes(x=fct_order(word, n, .desc=TRUE), y=n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black")+
labs(title = "La recherche du temps perdu", x="Mots", y="Fréquence")
help("fct_order")
ggplot(books_tidy, aes(x=fct_reorder(word, n, .desc=TRUE), y=n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black")+
labs(title = "La recherche du temps perdu", x="Mots", y="Fréquence")
barplot(height=books_tidy$n, names.arg= books_tidy$word, xlab="Mots", ylab="Fréquence", col="#973232", main="À la recherche du temps perdu")
ggplot(grade_by_size, aes(x = Var1, y = Freq, fill = Var2 ))+
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(title = "Distribution des notes", x = "Note", y = "Fréquence") +
theme_minimal()
ggplot(books_tidy, aes(x=fct_reorder(word, n, .desc=TRUE), y=n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black")+
labs(title = "La recherche du temps perdu", x="Mots", y="Fréquence")
ggplot(books_tidy, aes(x=fct_reorder(word, n, .desc=TRUE), y=n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black")+
labs(title = "La recherche du temps perdu", x="Mots", y="Fréquence")+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5))
barplot(height=books_tidy$n, names.arg= books_tidy$word, xlab="Mots", ylab="Fréquence", col="#973232", main="À la recherche du temps perdu")
ggplot(books_tidy, aes(x=fct_reorder(word, n, .desc=TRUE), y=n)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black")+
labs(title = "La recherche du temps perdu", x="Mots", y="Fréquence")+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5))
df <- proust_books() %>%
mutate(text = stringr::str_replace_all(.$text, "’", " "))
#Transformer le texte en corpus
corpus <- df$text %>%
VectorSource() %>%
VCorpus()
View(corpus)
help("fct_order")
help("VectorSource")
help("VCorpus")
